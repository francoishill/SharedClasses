<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
						 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
						 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
						 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
						 xmlns:inlinecommands='clr-namespace:InlineCommands'
						 xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
						 xmlns:input="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input.Toolkit"
						 xmlns:system="clr-namespace:System;assembly=mscorlib"
						 xmlns:propertyinterceptor='clr-namespace:PropertyInterceptor'
						 x:Class="SharedClasses.InlineCommandsUserControlWPF"
						 xmlns:sharedclasses='clr-namespace:SharedClasses'
						 mc:Ignorable="d"
						 d:DesignHeight="300"
						 d:DesignWidth="600">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary>
					<sharedclasses:ZeroCollapsedNonZeroVisible x:Key="hideListBox" />
				</ResourceDictionary>
				<!--<ResourceDictionary Source='/PresentationFrameawork.Aero,Version=3.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35,ProcessorArchitecture=MSIL;component/themes/aero.normalcolor.xaml' />-->
				<!--<ResourceDictionary Source='/PresentationFramework.Classic,Version=3.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35;component/themes/Classic.xaml' />-->
				<!--<ResourceDictionary Source='/PresentationFramework.Royale,Version=3.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35;component/themes/royale.normalcolor.xaml' />-->
				<!--<ResourceDictionary Source='/PresentationFramework.Luna,Version=3.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35;component/themes/luna.homestead.xaml' />-->
				<!--<ResourceDictionary Source='/PresentationFramework.Luna,Version=3.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35;component/themes/luna.metallic.xaml' />-->
				<!--<ResourceDictionary Source='/PresentationFramework.Luna,Version=3.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35;component/themes/luna.normalcolor.xaml' />-->
				<!--<ResourceDictionary Source='Themes/Generic.xaml' />-->
				<ResourceDictionary>
					<!--<Style x:Key="{x:Type ScrollViewer}"
								 TargetType="{x:Type ScrollViewer}">
						<Setter Property="HorizontalScrollBarVisibility"
										Value="Hidden" />
						<Setter Property="VerticalScrollBarVisibility"
										Value="Hidden" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid Background="Transparent">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*" />
												<ColumnDefinition Width="Auto" />
											</Grid.ColumnDefinitions>
											<Grid.RowDefinitions>
												<RowDefinition Height="*" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<ScrollBar x:Name="PART_VerticalScrollBar"
																 Grid.Column="1"
																 Minimum="0.0"
																 Maximum="{TemplateBinding ScrollableHeight}"
																 ViewportSize="{TemplateBinding ViewportHeight}"
																 Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
																 Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
																 Cursor="Arrow"
																 AutomationProperties.AutomationId="VerticalScrollBar" />
											<ScrollBar x:Name="PART_HorizontalScrollBar"
																 Orientation="Horizontal"
																 Grid.Row="1"
																 Minimum="0.0"
																 Maximum="{TemplateBinding ScrollableWidth}"
																 ViewportSize="{TemplateBinding ViewportWidth}"
																 Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
																 Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
																 Cursor="Arrow"
																 AutomationProperties.AutomationId="HorizontalScrollBar" />
										</Grid>
										<Grid Background="{TemplateBinding Background}">
											<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
																							Margin="{TemplateBinding Padding}"
																							Content="{TemplateBinding Content}"
																							ContentTemplate="{TemplateBinding ContentTemplate}"
																							CanContentScroll="{TemplateBinding CanContentScroll}" />
										</Grid>
									</Grid>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
						<Style.Triggers>
							<Trigger Property="IsEnabled"
											 Value="false">
								<Setter Property="Foreground"
												Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
							<Trigger Property="IsMouseOver"
											 Value="true">
								<Setter Property="HorizontalScrollBarVisibility"
												Value="Visible" />
								<Setter Property="VerticalScrollBarVisibility"
												Value="Visible" />
							</Trigger>
						</Style.Triggers>
					</Style>
					<Style x:Key="ScrollBarButton"
								 TargetType="{x:Type RepeatButton}">
						<Setter Property="OverridesDefaultStyle"
										Value="true" />
						<Setter Property="Focusable"
										Value="false" />
						<Setter Property="IsTabStop"
										Value="false" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type RepeatButton}">
									<Path x:Name="Arrow"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Fill="{TemplateBinding Background}" />
									<ControlTemplate.Triggers>
										<Trigger Property="theme:ScrollChrome.ScrollGlyph"
														 Value="UpArrow">
											<Setter TargetName="Arrow"
															Property="Data"
															Value="M 3,0 l 3,8 l -6,0 Z" />
										</Trigger>
										<Trigger Property="theme:ScrollChrome.ScrollGlyph"
														 Value="DownArrow">
											<Setter TargetName="Arrow"
															Property="Data"
															Value="M 0,0 l 6,0 l -3,8 Z" />
										</Trigger>
										<Trigger Property="theme:ScrollChrome.ScrollGlyph"
														 Value="LeftArrow">
											<Setter TargetName="Arrow"
															Property="Data"
															Value="M 0,3 l 8,-3 l 0,6 Z" />
										</Trigger>
										<Trigger Property="theme:ScrollChrome.ScrollGlyph"
														 Value="RightArrow">
											<Setter TargetName="Arrow"
															Property="Data"
															Value="M 0,0 l 8,3 l -8,3 Z" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
					<Style x:Key="ScrollBarThumb"
								 TargetType="{x:Type Thumb}">
						<Setter Property="OverridesDefaultStyle"
										Value="true" />
						<Setter Property="IsTabStop"
										Value="false" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type Thumb}">
									<Border Background="#FF777777"
													CornerRadius="2" />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
					<Style x:Key="HorizontalScrollBarPageButton"
								 TargetType="{x:Type RepeatButton}">
						<Setter Property="OverridesDefaultStyle"
										Value="true" />
						<Setter Property="Background"
										Value="Transparent" />
						<Setter Property="Focusable"
										Value="false" />
						<Setter Property="IsTabStop"
										Value="false" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type RepeatButton}">
									<Rectangle Fill="{TemplateBinding Background}"
														 Width="{TemplateBinding Width}"
														 Height="{TemplateBinding Height}" />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
					<Style x:Key="VerticalScrollBarPageButton"
								 TargetType="{x:Type RepeatButton}">
						<Setter Property="OverridesDefaultStyle"
										Value="true" />
						<Setter Property="Background"
										Value="Transparent" />
						<Setter Property="Focusable"
										Value="false" />
						<Setter Property="IsTabStop"
										Value="false" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type RepeatButton}">
									<Rectangle Fill="{TemplateBinding Background}"
														 Width="{TemplateBinding Width}"
														 Height="{TemplateBinding Height}" />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
					<Style x:Key="{x:Type ScrollBar}"
								 TargetType="{x:Type ScrollBar}">
						<Setter Property="Background"
										Value="#FF979797" />
						<Setter Property="Stylus.IsPressAndHoldEnabled"
										Value="false" />
						<Setter Property="Stylus.IsFlicksEnabled"
										Value="false" />
						<Setter Property="Foreground"
										Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
						<Setter Property="Width"
										Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
						<Setter Property="MinWidth"
										Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
						<Setter Property="Margin"
										Value="2" />
						<Setter Property="Width"
										Value="10" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ScrollBar}">
									<Border x:Name="Bg"
													CornerRadius="2"
													Margin="2,10"
													Opacity="0.75"
													Background="{TemplateBinding Background}"
													VerticalAlignment="Bottom">
										<Grid SnapsToDevicePixels="true">
											<Grid.RowDefinitions>
												<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
												<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
											</Grid.RowDefinitions>
											<RepeatButton Style="{StaticResource ScrollBarButton}"
																		Background="#FFCBCBCB"
																		IsEnabled="{TemplateBinding IsMouseOver}"
																		Command="{x:Static ScrollBar.LineUpCommand}"
																		theme:ScrollChrome.ScrollGlyph="UpArrow"
																		Margin="0,4" />
											<RepeatButton Style="{StaticResource ScrollBarButton}"
																		Background="#FFCBCBCB"
																		Grid.Row="1"
																		IsEnabled="{TemplateBinding IsMouseOver}"
																		Command="{x:Static ScrollBar.LineDownCommand}"
																		theme:ScrollChrome.ScrollGlyph="DownArrow"
																		Margin="0,4"></RepeatButton>
										</Grid>
									</Border>
									<ControlTemplate.Triggers>
										<Trigger Property="IsEnabled"
														 Value="false">
											<Setter TargetName="Bg"
															Property="Visibility"
															Value="Hidden" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
						<Style.Triggers>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver"
														 Value="True" />
									<Condition Property="Orientation"
														 Value="Vertical" />
								</MultiTrigger.Conditions>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="Orientation"
														 Value="Horizontal" />
									<Condition Property="IsMouseOver"
														 Value="False" />
								</MultiTrigger.Conditions>
								<Setter Property="Width"
												Value="Auto" />
								<Setter Property="MinWidth"
												Value="0" />
								<Setter Property="Height"
												Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
								<Setter Property="MinHeight"
												Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type ScrollBar}">
											<Border x:Name="Bg"
															CornerRadius="2"
															Margin="2"
															Opacity="0.75"
															Background="{TemplateBinding Background}"
															HorizontalAlignment="Right">
												<Grid SnapsToDevicePixels="true">
													<Grid.ColumnDefinitions>
														<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
														<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
													</Grid.ColumnDefinitions>
													<RepeatButton Style="{StaticResource ScrollBarButton}"
																				Background="#FFCBCBCB"
																				IsEnabled="{TemplateBinding IsMouseOver}"
																				Command="{x:Static ScrollBar.LineLeftCommand}"
																				theme:ScrollChrome.ScrollGlyph="LeftArrow"
																				Margin="4,0" />
													<RepeatButton Style="{StaticResource ScrollBarButton}"
																				Background="#FFCBCBCB"
																				Grid.Column="1"
																				IsEnabled="{TemplateBinding IsMouseOver}"
																				Command="{x:Static ScrollBar.LineRightCommand}"
																				theme:ScrollChrome.ScrollGlyph="RightArrow"
																				Margin="4,0" />
												</Grid>
											</Border>
											<ControlTemplate.Triggers>
												<Trigger Property="IsEnabled"
																 Value="false">
													<Setter TargetName="Bg"
																	Property="Visibility"
																	Value="Hidden" />
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver"
														 Value="True" />
									<Condition Property="Orientation"
														 Value="Horizontal" />
								</MultiTrigger.Conditions>
								<Setter Property="Width"
												Value="Auto" />
								<Setter Property="MinWidth"
												Value="0" />
								<Setter Property="Height"
												Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
								<Setter Property="MinHeight"
												Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
								<Setter Property="Height"
												Value="30" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type ScrollBar}">
											<Border CornerRadius="4"
															Margin="2"
															Opacity="0.75"
															Background="{TemplateBinding Background}">
												<Grid SnapsToDevicePixels="true">
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="0.00001*" />
														<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
														<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
													</Grid.ColumnDefinitions>
													<Track x:Name="PART_Track"
																 IsEnabled="{TemplateBinding IsMouseOver}">
														<Track.DecreaseRepeatButton>
															<RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
																						Command="{x:Static ScrollBar.PageLeftCommand}" />
														</Track.DecreaseRepeatButton>
														<Track.IncreaseRepeatButton>
															<RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}"
																						Command="{x:Static ScrollBar.PageRightCommand}" />
														</Track.IncreaseRepeatButton>
														<Track.Thumb>
															<Thumb x:Name="Thumb"
																		 Style="{StaticResource ScrollBarThumb}"
																		 theme:ScrollChrome.ScrollGlyph="HorizontalGripper"
																		 Margin="2" />
														</Track.Thumb>
													</Track>
													<RepeatButton Style="{StaticResource ScrollBarButton}"
																				Background="#FFFFFFFF"
																				Grid.Column="1"
																				IsEnabled="{TemplateBinding IsMouseOver}"
																				Command="{x:Static ScrollBar.LineLeftCommand}"
																				theme:ScrollChrome.ScrollGlyph="LeftArrow"
																				RenderTransformOrigin="0.5, 0.5">
														<RepeatButton.RenderTransform>
															<ScaleTransform ScaleX="1.5"
																							ScaleY="1.5" />
														</RepeatButton.RenderTransform>
													</RepeatButton>
													<RepeatButton Style="{StaticResource ScrollBarButton}"
																				Background="#FFFFFFFF"
																				Grid.Column="2"
																				IsEnabled="{TemplateBinding IsMouseOver}"
																				Command="{x:Static ScrollBar.LineRightCommand}"
																				theme:ScrollChrome.ScrollGlyph="RightArrow"
																				RenderTransformOrigin="0.5, 0.5">
														<RepeatButton.RenderTransform>
															<ScaleTransform ScaleX="1.5"
																							ScaleY="1.5" />
														</RepeatButton.RenderTransform>
													</RepeatButton>
												</Grid>
											</Border>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</MultiTrigger>
						</Style.Triggers>
					</Style>-->
				</ResourceDictionary>
				<ResourceDictionary>
					<LinearGradientBrush x:Key='HoverBackground'
															 StartPoint='0.5,0'
															 EndPoint='0.5,1'>
						<GradientStop Offset='0'
													Color='#66bababa' />
						<GradientStop Offset='1'
													Color='#66707070' />
					</LinearGradientBrush>
					<LinearGradientBrush x:Key='HoverBorderBrush'
															 StartPoint='0.5,0'
															 EndPoint='0.5,1'>
						<GradientStop Offset='0'
													Color='#bbfafafa' />
						<GradientStop Offset='1'
													Color='#bb707070' />
					</LinearGradientBrush>
					<LinearGradientBrush x:Key='PressedBackground'
															 StartPoint='0.5,0'
															 EndPoint='0.5,1'>
						<GradientStop Offset='0'
													Color='#66ffffff' />
						<GradientStop Offset='1'
													Color='#66dddddd' />
					</LinearGradientBrush>
					<LinearGradientBrush x:Key='PressedBorderBrush'
															 StartPoint='0.5,0'
															 EndPoint='0.5,1'>
						<GradientStop Offset='0'
													Color='#bbffffff' />
						<GradientStop Offset='1'
													Color='#bbdddddd' />
					</LinearGradientBrush>
					<ControlTemplate x:Key="CommonValidationToolTipTemplate"
													 TargetType="ToolTip">
						<Grid x:Name="Root"
									Margin="5,0"
									RenderTransformOrigin="0,0"
									Opacity="0">
							<Grid.RenderTransform>
								<TranslateTransform x:Name="Translation"
																		X="-25" />
							</Grid.RenderTransform>
							<!--<VisualStateManager.VisualStateGroups>
								<VisualStateGroup Name="OpenStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0" />
										<VisualTransition To="Open"
																			GeneratedDuration="0:0:0.2">
											<Storyboard>
												<DoubleAnimation Storyboard.TargetName="Translation"
																				 Storyboard.TargetProperty="X"
																				 To="0"
																				 Duration="0:0:0.2">
													<DoubleAnimation.EasingFunction>
														<BackEase Amplitude=".3"
																			EasingMode="EaseOut" />
													</DoubleAnimation.EasingFunction>
												</DoubleAnimation>
												<DoubleAnimation Storyboard.TargetName="Root"
																				 Storyboard.TargetProperty="Opacity"
																				 To="1"
																				 Duration="0:0:0.2" />
											</Storyboard>
										</VisualTransition>
									</VisualStateGroup.Transitions>
									<VisualState x:Name="Closed">
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="Root"
																			 Storyboard.TargetProperty="Opacity"
																			 To="0"
																			 Duration="0" />
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Open">
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="Translation"
																			 Storyboard.TargetProperty="X"
																			 To="0"
																			 Duration="0" />
											<DoubleAnimation Storyboard.TargetName="Root"
																			 Storyboard.TargetProperty="Opacity"
																			 To="1"
																			 Duration="0" />
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>-->
							<Border Margin="4,4,-4,-4"
											Background="#052A2E31"
											CornerRadius="5" />
							<Border Margin="3,3,-3,-3"
											Background="#152A2E31"
											CornerRadius="4" />
							<Border Margin="2,2,-2,-2"
											Background="#252A2E31"
											CornerRadius="3" />
							<Border Margin="1,1,-1,-1"
											Background="#352A2E31"
											CornerRadius="2" />
							<Border Background="#FFDC000C"
											CornerRadius="2">
								<TextBlock UseLayoutRounding="false"
													 Foreground="White"
													 Margin="8,4,8,4"
													 MaxWidth="250"
													 TextWrapping="Wrap"
													 Text="{Binding (Validation.Errors)[0].ErrorContent}" />
							</Border>
						</Grid>
					</ControlTemplate>
					<!--<ControlTemplate x:Key="TextBoxBaseControlTemplate"
                                     TargetType="{x:Type input:AutoCompleteBox}">-->
					<ControlTemplate x:Key="TextBoxBaseControlTemplate"
													 TargetType="{x:Type TextBoxBase}">
						<Border Background="{TemplateBinding Background}"
										x:Name="Bd"
										BorderThickness="{TemplateBinding BorderThickness}"
										CornerRadius="5"
										Padding="2">
							<DockPanel>
								<!--<RatherPutActiveCommandNameButtonAndArgumentsListOutsideTheAutoCompleteBox />
								<FixDownKeyIssue_UncommentFollowingCode_CannotMoveUpDownWithArrowKeys />-->
								<!--<ListBox>
									<ListBoxItem>Hallo1</ListBoxItem>
									<ListBoxItem>Hallo2</ListBoxItem>
									<ListBoxItem>Hallo3</ListBoxItem>
								</ListBox>-->
								<Border x:Name="EmbeddedButton"
												DockPanel.Dock="Left"
												BorderBrush="#ccc"
												BorderThickness="1"
												CornerRadius="3"
												Padding="3,0,3,3"
												Margin="0,0,3,0"
												MouseLeftButtonDown='EmbeddedButton_MouseLeftButtonDown'
												MouseRightButtonUp='EmbeddedButton_MouseRightButtonDown'>
									<Border.Background>
										<LinearGradientBrush StartPoint="0,0"
																				 EndPoint="0,1">
											<GradientStop Color="#fff"
																		Offset="0" />
											<GradientStop Color="#eee"
																		Offset="0.7" />
											<GradientStop Color="#f0f0f0"
																		Offset="1" />
										</LinearGradientBrush>
									</Border.Background>
									<DockPanel VerticalAlignment='Center'>
										<!--<TextBlock DockPanel.Dock='Left'
															 x:Name="EmbeddedButtonTextBlock"
															 Foreground="#555"
															 Text="Halloo">-->
										<TextBlock DockPanel.Dock='Left'
															 x:Name="EmbeddedButtonTextBlock"
															 Foreground="#555"
															 Text="{Binding DisplayName, UpdateSourceTrigger=PropertyChanged}">
										<TextBlock.ToolTip>
											<StackPanel>
												<TextBlock Text='{Binding Description, UpdateSourceTrigger=PropertyChanged}' />
												<TextBlock Text='{Binding ArgumentsExample, UpdateSourceTrigger=PropertyChanged}' />
											</StackPanel>
										</TextBlock.ToolTip>
									</TextBlock>
										<!--<TextBlock DockPanel.Dock='Right'
															 Text='{Binding Description, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}'/>-->
									</DockPanel>
								</Border>
								<Border DockPanel.Dock='Left'>
									<Border.Resources>
										<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
																		 Color="Transparent" />
										<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
																		 Color="Transparent" />
									</Border.Resources>
									<ListBox x:Name='EmbeddedListbox'
													 BorderThickness='0'
													 ItemsSource='{Binding CurrentArguments, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}'>
										<ListBox.ItemsPanel>
											<ItemsPanelTemplate>
												<WrapPanel IsItemsHost="True" />
											</ItemsPanelTemplate>
										</ListBox.ItemsPanel>
										<ListBox.ItemTemplate>
											<DataTemplate>
												<Border x:Name='MainBorder'
																BorderBrush="#ccc"
																BorderThickness="1"
																CornerRadius="3"
																Padding="3,0,3,3"
																Margin="0,0,3,0"
																Opacity='0.7'>
													<Border.Background>
														<LinearGradientBrush StartPoint="0,0"
																								 EndPoint="0,1">
															<GradientStop Color="#456"
																						Offset="0" />
															<GradientStop Color="#345"
																						Offset="0.7" />
															<GradientStop Color="#405060"
																						Offset="1" />
														</LinearGradientBrush>
													</Border.Background>
													<DockPanel>
														<DockPanel DockPanel.Dock='Top'
																			 LastChildFill='True'
																			 Background='White'
																			 Margin='0,3,0,0'>
															<Button DockPanel.Dock='Right'
																			Name='ButtonClose'
																			HorizontalAlignment='Right'
																			VerticalAlignment='Center'
																			Content='X'
																			FontSize='12'
																			Foreground='#300'
																			BorderBrush='#333'
																			PreviewMouseLeftButtonUp='ClearTextboxTextButton_MouseLeftButtonDown'>
																<Button.Template>
																	<ControlTemplate TargetType='Button'>
																		<Border Name='ButtonBorder'
																						CornerRadius='3'
																						BorderThickness='1'
																						BorderBrush='Transparent'
																						Background='Transparent'
																						Padding='2'>
																			<ContentPresenter Content='{TemplateBinding Content}'
																												HorizontalAlignment='Center'
																												VerticalAlignment='Center' />
																		</Border>
																		<ControlTemplate.Triggers>
																			<Trigger Property='IsMouseOver'
																							 Value='True'>
																				<Setter TargetName='ButtonBorder'
																								Property='Background'
																								Value='{StaticResource HoverBackground}' />
																				<Setter TargetName='ButtonBorder'
																								Property='BorderBrush'
																								Value='{StaticResource HoverBorderBrush}' />
																			</Trigger>
																			<Trigger Property='IsPressed'
																							 Value='True'>
																				<Setter TargetName='ButtonBorder'
																								Property='Background'
																								Value='{StaticResource PressedBackground}' />
																				<Setter TargetName='ButtonBorder'
																								Property='BorderBrush'
																								Value='{StaticResource PressedBorderBrush}' />
																			</Trigger>
																		</ControlTemplate.Triggers>
																	</ControlTemplate>
																</Button.Template>
															</Button>
															<input:AutoCompleteBox x:Name='ArgumentText'
																										 BorderThickness='0'
																										 MinimumPrefixLength='0'
																										 MinimumPopulateDelay='0'
																										 Text='{Binding CurrentValue, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}'
																										 Tag='{Binding DisplayName, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}'
																										 ItemsSource='{Binding PredefinedAutocompleteList, UpdateSourceTrigger=PropertyChanged}'
																										 SelectionChanged='ArgumentText_SelectionChanged'
																										 HorizontalAlignment='Stretch'
																										 FontSize='20'
																										 GotFocus='ArgumentText_GotFocus'
																										 IsTextCompletionEnabled='True'
																										 PreviewKeyDown='AutoCompleteActualTextBox_PreviewKeyDown'
																										 AllowDrop='True'
																										 PreviewDragOver='ArgumentText_DragOver'
																										 PreviewDrop='ArgumentText_Drop'
																										 Width='auto'>
																<input:AutoCompleteBox.ContextMenu>
																	<ContextMenu Background="White">
																		<MenuItem Command="ApplicationCommands.Copy" />
																		<MenuItem Command="ApplicationCommands.Cut" />
																		<MenuItem Command="ApplicationCommands.Paste" />
																	</ContextMenu>
																</input:AutoCompleteBox.ContextMenu>
																<input:AutoCompleteBox.ItemTemplate>
																	<DataTemplate>
																		<DockPanel LastChildFill='True'
																							 HorizontalAlignment='Stretch'>
																			<!--<Button DockPanel.Dock='Left'
																							Content='X' />-->
																			<TextBlock DockPanel.Dock='Right'
																								 Padding='3,0'
																								 FontSize='14'
																								 Foreground='#678'
																								 Text="{Binding}"
																								 VerticalAlignment="Center" />
																		</DockPanel>
																	</DataTemplate>
																</input:AutoCompleteBox.ItemTemplate>
															</input:AutoCompleteBox>
														</DockPanel>
														<TextBlock DockPanel.Dock='Bottom'
																			 Text='{Binding DisplayName}'
																			 Foreground='#ddd'
																			 HorizontalAlignment='Center'
																			 FontSize='12' />
													</DockPanel>
												</Border>
											</DataTemplate>
										</ListBox.ItemTemplate>
									</ListBox>
								</Border>
								<!--<Button x:Name='GoButton'
												DockPanel.Dock='Right'
												FontFamily="Marlett"
												Focusable='False'
												Foreground='#080'
												Opacity='0.3'
												FontSize="20"
												Content="4"
												Height='24'
												Padding='0'
												Background='Transparent'
												BorderBrush='Transparent'
												Click='GoButton_Click'>
									<Button.Triggers>
										<EventTrigger RoutedEvent='MouseEnter'>
											<BeginStoryboard>
												<Storyboard>
													<DoubleAnimation Storyboard.TargetProperty='Opacity'
																					 Duration='0:0:0.4'
																					 To='1' />
												</Storyboard>
											</BeginStoryboard>
										</EventTrigger>
										<EventTrigger RoutedEvent='MouseLeave'>
											<BeginStoryboard>
												<Storyboard>
													<DoubleAnimation Storyboard.TargetProperty='Opacity'
																					 Duration='0:0:0.2'
																					 To='0.3' />
												</Storyboard>
											</BeginStoryboard>
										</EventTrigger>
									</Button.Triggers>
								</Button>-->
								<!--<Border x:Name="EmbeddedButton2"
												DockPanel.Dock="Right"
												BorderBrush="#ccc"
												BorderThickness="1"
												CornerRadius="3"
												Padding="3,0,3,3"
												Margin="0,0,3,0"
												VerticalAlignment="Center">
									<Border.Background>
										<LinearGradientBrush StartPoint="0,0"
																				 EndPoint="0,1">
											<GradientStop Color="#222"
																		Offset="0" />
											<GradientStop Color="#000"
																		Offset="0.7" />
											<GradientStop Color="#101010"
																		Offset="1" />
										</LinearGradientBrush>
									</Border.Background>
									<TextBlock x:Name="EmbeddedButtonTextBlock2"
														 Foreground="#eee"
														 FontSize="12"><Run Text="Testing" /></TextBlock>
								</Border>-->
								<ScrollViewer x:Name="PART_ContentHost"
															DockPanel.Dock="Right" />
							</DockPanel>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled"
											 Value="False">
								<Setter Property="Background"
												Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
												TargetName="Bd" />
								<Setter Property="Foreground"
												Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							</Trigger>
							<Trigger Property="IsFocused"
											 Value="True">
								<Setter Property="BorderBrush"
												Value="#0BF" />
							</Trigger>
							<Trigger Property="Width"
											 Value="Auto">
								<Setter Property="MinWidth"
												Value="100" />
							</Trigger>
							<Trigger Property="Height"
											 Value="Auto">
								<Setter Property="MinHeight"
												Value="20" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
					<ControlTemplate x:Key="TreeviewControlTemplate"
													 TargetType="{x:Type TreeView}">
						<Border x:Name="Bd"
										CornerRadius="5"
										Background="Transparent"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer Focusable="True"
														CanContentScroll="False"
														Padding="4">
								<ItemsPresenter />
							</ScrollViewer>
						</Border>
					</ControlTemplate>
				</ResourceDictionary>
				<!--<ResourceDictionary>                   
                                <Style x:Key="{x:Type ScrollBar}"
                           TargetType="{x:Type ScrollBar}">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver"
                                     Value="True">
                                <Setter Property="Opacity"
                                        Value="0.9" />
                            </Trigger>
                            <Trigger Property="IsMouseOver"
                                     Value="False">
                                <Setter Property="Opacity"
                                        Value="0.4" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    <Style x:Key="{x:Type ScrollViewer}"
                           TargetType="{x:Type ScrollViewer}">
                        <Setter Property="OverridesDefaultStyle"
                                Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ScrollContentPresenter Grid.ColumnSpan="2"
                                                                Grid.RowSpan="2" />
                                        <ScrollBar Name="PART_VerticalScrollBar"
                                                   Grid.Column="1"
                                                   Value="{TemplateBinding VerticalOffset}"
                                                   Maximum="{TemplateBinding ScrollableHeight}"
                                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                                        <ScrollBar Name="PART_HorizontalScrollBar"
                                                   Orientation="Horizontal"
                                                   Grid.Row="1"
                                                   Value="{TemplateBinding HorizontalOffset}"
                                                   Maximum="{TemplateBinding ScrollableWidth}"
                                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>-->
				<ResourceDictionary>
					<!--Control colors.-->
					<Color x:Key="WindowColor">#FFE8EDF9</Color>
					<Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
					<Color x:Key="ContentAreaColorDark">#FF7381F9</Color>
					<Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
					<Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
					<Color x:Key="DisabledForegroundColor">#FF888888</Color>
					<Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
					<Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
					<Color x:Key="ControlLightColor">White</Color>
					<Color x:Key="ControlMediumColor">#FF7381F9</Color>
					<Color x:Key="ControlDarkColor">#FF211AA9</Color>
					<!--<Color x:Key="ControlMouseOverColor">#FF3843C4</Color>-->
					<Color x:Key="ControlMouseOverColor">#ddd</Color>
					<!--<Color x:Key="ControlPressedColor">#FF211AA9</Color>-->
					<Color x:Key="ControlPressedColor">#999</Color>
					<Color x:Key="GlyphColor">#FF444444</Color>
					<Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>
					<!--Border colors-->
					<Color x:Key="BorderLightColor">Transparent</Color>
					<!--<Color x:Key="BorderLightColor">#FFCCCCCC</Color>-->
					<Color x:Key="BorderMediumColor">#FF888888</Color>
					<!--<Color x:Key="BorderDarkColor">#FF444444</Color>-->
					<Color x:Key="BorderDarkColor">Transparent</Color>
					<Color x:Key="PressedBorderLightColor">#FF888888</Color>
					<Color x:Key="PressedBorderDarkColor">#FF444444</Color>
					<Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
					<Color x:Key="DisabledBorderDarkColor">#FF888888</Color>
					<Color x:Key="DefaultBorderBrushDarkColor">Black</Color>
					<!--Control-specific resources.-->
					<Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
					<Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
					<Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>
					<Color x:Key="NavButtonFrameColor">#FF3843C4</Color>
					<LinearGradientBrush x:Key="MenuPopupBrush"
															 EndPoint="0.5,1"
															 StartPoint="0.5,0">
						<GradientStop Color="{DynamicResource ControlLightColor}"
													Offset="0" />
						<GradientStop Color="{DynamicResource ControlMediumColor}"
													Offset="0.5" />
						<GradientStop Color="{DynamicResource ControlLightColor}"
													Offset="1" />
					</LinearGradientBrush>
					<LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
															 StartPoint="0,0"
															 EndPoint="1,0">
						<LinearGradientBrush.GradientStops>
							<GradientStopCollection>
								<GradientStop Color="#000000FF"
															Offset="0" />
								<GradientStop Color="#600000FF"
															Offset="0.4" />
								<GradientStop Color="#600000FF"
															Offset="0.6" />
								<GradientStop Color="#000000FF"
															Offset="1" />
							</GradientStopCollection>
						</LinearGradientBrush.GradientStops>
					</LinearGradientBrush>
				</ResourceDictionary>
				<ResourceDictionary>
					<!--<Style x:Key='AutoCompleteBox_InlineCommands'
								 TargetType="{x:Type input:AutoCompleteBox}">
						<Setter Property="IsTabStop"
										Value="False" />
						<Setter Property="Padding"
										Value="2" />
						<Setter Property="BorderThickness"
										Value="1" />
						<Setter Property="BorderBrush">
							<Setter.Value>
								<LinearGradientBrush EndPoint="0.5,1"
																		 StartPoint="0.5,0">
									<GradientStop Color="#FFA3AEB9"
																Offset="0" />
									<GradientStop Color="#FF8399A9"
																Offset="0.375" />
									<GradientStop Color="#FF718597"
																Offset="0.375" />
									<GradientStop Color="#FF617584"
																Offset="1" />
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="Background"
										Value="#FFFFFFFF" />
						<Setter Property="Foreground"
										Value="#FF000000" />
						<Setter Property="MinWidth"
										Value="45" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type input:AutoCompleteBox}">
									<Grid Opacity="{TemplateBinding Opacity}">
										<TextBox Padding="{TemplateBinding Padding}"
														 Background="{TemplateBinding Background}"
														 IsTabStop="True"
														 x:Name="Text"
														 Text='{Binding CurrentValue}'
														 HorizontalContentAlignment='Center'
														 HorizontalScrollBarVisibility='Auto'
														 Style="{TemplateBinding TextBoxStyle}"
														 BorderThickness="{TemplateBinding BorderThickness}"
														 Foreground="{TemplateBinding Foreground}"
														 Margin="0"
														 ContextMenuOpening='AutoCompleteActualTextBox_ContextMenuOpening'
														 PreviewKeyDown='AutoCompleteActualTextBox_PreviewKeyDown'>
											<TextBox.ContextMenu>
												<ContextMenu Background="White">
													<MenuItem Command="ApplicationCommands.Copy" />
													<MenuItem Command="ApplicationCommands.Cut" />
													<MenuItem Command="ApplicationCommands.Paste" />
												</ContextMenu>
											</TextBox.ContextMenu>
											<TextBox.Template>
												<ControlTemplate>
													<Border Background='White'
																	CornerRadius='3'
																	BorderThickness='1'>
														<Border.Resources>
															<Style TargetType='{x:Type TextBlock}'>
																<Style.Triggers>
																	<Trigger Property='IsMouseOver'
																					 Value='True'>
																		<Setter Property='Background'
																						Value='#ddd' />
																		<Setter Property='Foreground'
																						Value='#000' />
																	</Trigger>
																	<Trigger Property='IsMouseOver'
																					 Value='False'>
																		<Setter Property='Foreground'
																						Value='#bbb' />
																	</Trigger>
																</Style.Triggers>
															</Style>
														</Border.Resources>
														<DockPanel LastChildFill='True'>
															<Border x:Name='ClearTextboxTextButton'
																			DockPanel.Dock='Right'
																			MouseLeftButtonDown='ClearTextboxTextButton_MouseLeftButtonDown'
																			BorderThickness='0'
																			Background='Transparent'>
																<TextBlock Padding='3,0'>x</TextBlock>
															</Border>
															<TextBox x:Name='TextBoxWithText'
																			 DockPanel.Dock='Left'
																			 Background='Transparent'
																			 BorderBrush='Transparent'
																			 BorderThickness='0'
																			 Text='{Binding CurrentValue, UpdateSourceTrigger=PropertyChanged}'
																			 LostFocus='TextBoxWithText_LostFocus'
																			 GotFocus='TextBoxWithText_GotFocus' />
														</DockPanel>
													</Border>
													<ControlTemplate.Triggers>
														<Trigger Property="IsFocused"
																		 Value="True">
															<Setter TargetName="TextBoxWithText"
																			Property="FocusManager.FocusedElement"
																			Value="{Binding ElementName=TextBoxWithText}" />
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</TextBox.Template>
										</TextBox>
										<Border x:Name="ValidationErrorElement"
														Visibility="Collapsed"
														BorderBrush="#FFDB000C"
														BorderThickness="1"
														CornerRadius="1">
											<ToolTipService.ToolTip>
												<ToolTip x:Name="validationTooltip"
																 DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
																 Template="{StaticResource CommonValidationToolTipTemplate}"
																 Placement="Right"
																 PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
													<ToolTip.Triggers>
														<EventTrigger RoutedEvent="Canvas.Loaded">
															<BeginStoryboard>
																<Storyboard>
																	<ObjectAnimationUsingKeyFrames Storyboard.TargetName="validationTooltip"
																																 Storyboard.TargetProperty="IsHitTestVisible">
																		<DiscreteObjectKeyFrame KeyTime="0">
																			<DiscreteObjectKeyFrame.Value>
																				<system:Boolean>true</system:Boolean>
																			</DiscreteObjectKeyFrame.Value>
																		</DiscreteObjectKeyFrame>
																	</ObjectAnimationUsingKeyFrames>
																</Storyboard>
															</BeginStoryboard>
														</EventTrigger>
													</ToolTip.Triggers>
												</ToolTip>
											</ToolTipService.ToolTip>
											<Grid Height="12"
														HorizontalAlignment="Right"
														Margin="1,-4,-4,0"
														VerticalAlignment="Top"
														Width="12"
														Background="Transparent">
												<Path Fill="#FFDC000C"
															Margin="1,3,0,0"
															Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" />
												<Path Fill="#ffffff"
															Margin="1,3,0,0"
															Data="M 0,0 L2,0 L 8,6 L8,8" />
											</Grid>
										</Border>
										<Popup x:Name="Popup"
													 Width='Auto'
													 VerticalOffset='1'
													 AllowsTransparency='True'
													 Opened='Popup_Opened'
													 Closed='Popup_Closed'>
											<Border CornerRadius='3'
															BorderBrush='#aaa'
															BorderThickness='1'
															Padding='3'
															Background='#fff'>
												<ListBox x:Name="Selector"
																 ScrollViewer.HorizontalScrollBarVisibility="Auto"
																 ScrollViewer.VerticalScrollBarVisibility="Auto"
																 ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
																 Background="{TemplateBinding Background}"
																 Foreground="#579"
																 BorderThickness="0"
																 ItemTemplate='{TemplateBinding ItemTemplate}' >
												</ListBox>
											</Border>
										</Popup>
									</Grid>
									<ControlTemplate.Triggers>
										<Trigger Property="IsEnabled"
														 Value="False">
											<Setter Property="Background"
															Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
											<Setter Property="Foreground"
															Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
										</Trigger>
										<Trigger Property="IsFocused"
														 Value="True">
											<Setter Property="BorderBrush"
															Value="#0BF" />
										</Trigger>
										<Trigger Property="Width"
														 Value="Auto">
											<Setter Property="MinWidth"
															Value="100" />
										</Trigger>
										<Trigger Property="Height"
														 Value="Auto">
											<Setter Property="MinHeight"
															Value="20" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>-->
				</ResourceDictionary>
				<!--<ResourceDictionary>
					<Style x:Key="autoCompleteTextBox"
								 TargetType="{x:Type TextBox}">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type TextBoxBase}">
									<Border BorderBrush='#888'
													BorderThickness='1'
													CornerRadius='3'>
										<Grid x:Name="root">
											<ScrollViewer Margin="0"
																		x:Name="PART_ContentHost" />
											<Popup x:Name="PART_Popup"
														 AllowsTransparency="true"
														 Placement="Bottom"
														 IsOpen="False"
														 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
												<ListBox x:Name="PART_ItemList"
																 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
																 VerticalContentAlignment="Stretch"
																 HorizontalContentAlignment="Stretch"
																 KeyboardNavigation.DirectionalNavigation="Contained" />
											</Popup>
										</Grid>
									</Border>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</ResourceDictionary>-->
				<ResourceDictionary>
					<Style x:Key="BaseButtonStyle"
								 TargetType="{x:Type ButtonBase}">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ButtonBase}">
									<theme:ButtonChrome Name="Chrome"
																			Background="{TemplateBinding Background}"
																			BorderBrush="{TemplateBinding BorderBrush}"
																			RenderDefaulted="{TemplateBinding Button.IsDefaulted}"
																			RenderMouseOver="{TemplateBinding IsMouseOver}"
																			RenderPressed="{TemplateBinding IsPressed}"
																			SnapsToDevicePixels="true">
										<ContentPresenter Margin="{TemplateBinding Padding}"
																			VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
																			HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
																			RecognizesAccessKey="True"
																			SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</theme:ButtonChrome>
									<ControlTemplate.Triggers>
										<Trigger Property="IsKeyboardFocused"
														 Value="true">
											<Setter TargetName="Chrome"
															Property="RenderDefaulted"
															Value="true" />
										</Trigger>
										<Trigger Property="ToggleButton.IsChecked"
														 Value="true">
											<Setter TargetName="Chrome"
															Property="RenderPressed"
															Value="true" />
										</Trigger>
										<Trigger Property="IsEnabled"
														 Value="false">
											<Setter Property="Foreground"
															Value="#ADADAD" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
					<Style x:Key="{x:Type ToggleButton}"
								 BasedOn="{StaticResource BaseButtonStyle}"
								 TargetType="{x:Type ToggleButton}" />
					<Style x:Key="{x:Type RepeatButton}"
								 BasedOn="{StaticResource BaseButtonStyle}"
								 TargetType="{x:Type RepeatButton}" />
					<Style x:Key="{x:Type Button}"
								 BasedOn="{StaticResource BaseButtonStyle}"
								 TargetType="{x:Type Button}" />
				</ResourceDictionary>
				<!--<ResourceDictionary>
					<Style TargetType="{x:Type ListBoxItem}">
						<Style.Resources>
							<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
															 Color="Transparent" />
							<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}"
															 Color="Transparent" />
						</Style.Resources>
					</Style>
					<Style TargetType="{x:Type ListBox}">
						<Style.Resources>
							<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
															 Color="Transparent" />
							<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}"
															 Color="Transparent" />
						</Style.Resources>
					</Style>
				</ResourceDictionary>-->
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</UserControl.Resources>
	<!--<DockPanel LastChildFill="True">-->
	<!--<Border BorderThickness='1'
					BorderBrush='#aaa'>-->
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition />
		</Grid.RowDefinitions>
		<Label x:Name="label_ArgumentsExample"
					 Grid.Row="0"
					 Content="Label"
					 HorizontalAlignment="Left"
					 VerticalAlignment="Top"
					 Foreground="Gray" />
		<Button x:Name='CloseUsercontrolButton'
						Grid.Row='0'
						HorizontalAlignment='Right'
						VerticalAlignment='Center'
						BorderBrush='#ddd'
						BorderThickness='1'
						Background='Transparent'
						Foreground='#777'
						Padding='3,0'
						Content='quit'
						Visibility='Collapsed'
						ToolTip="Quit Quick Access" />
		<!--<Border x:Name='CloseUsercontrolButton'
						Grid.Row='0'
						HorizontalAlignment='Right'
						CornerRadius='5'
						BorderBrush='#ddd'
						BorderThickness='1'
						Background='Transparent'>
			<Border.Triggers>
				<EventTrigger RoutedEvent='MouseEnter'
											SourceName='CloseUsercontrolButton'>
					<BeginStoryboard>
						<Storyboard Duration='0:0:0.2'>
							<ColorAnimation BeginTime='0:0:0'
															Duration='0:0:0.2'
															Storyboard.TargetName='CloseUsercontrolButton'
															Storyboard.TargetProperty='(Background).(SolidColorBrush.Color)'
															From='Transparent'
															To='#333'></ColorAnimation>
							<ColorAnimation BeginTime='0:0:0'
															Duration='0:0:0.2'
															Storyboard.TargetName='LabelofCloseUsercontrolButton'
															Storyboard.TargetProperty='(Foreground).(SolidColorBrush.Color)'
															From='#000'
															To='#fff'></ColorAnimation>
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger>
				<EventTrigger RoutedEvent='MouseLeave'
											SourceName='CloseUsercontrolButton'>
					<BeginStoryboard>
						<Storyboard Duration='0:0:1'>
							<ColorAnimation BeginTime='0:0:0'
															Duration='0:0:1'
															Storyboard.TargetName='CloseUsercontrolButton'
															Storyboard.TargetProperty='(Background).(SolidColorBrush.Color)'
															From='#333'
															To='Transparent'></ColorAnimation>
							<ColorAnimation BeginTime='0:0:0'
															Duration='0:0:1'
															Storyboard.TargetName='LabelofCloseUsercontrolButton'
															Storyboard.TargetProperty='(Foreground).(SolidColorBrush.Color)'
															From='#fff'
															To='#000'></ColorAnimation>
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger>
			</Border.Triggers>
			<Label x:Name='LabelofCloseUsercontrolButton'
						 Foreground='#000'>Exit</Label>
		</Border>-->
		<TextBox Name='MainAutoCompleteTextbox'
						 Grid.Row="1"
						 FontSize="36"
						 Margin='5'
						 HorizontalAlignment="Stretch"
						 PreviewKeyDown='MainAutoCompleteTextbox_PreviewKeyDown'>
			<TextBox.Template>
				<ControlTemplate>
					<Border BorderBrush='#bbb'
									BorderThickness='1'
									CornerRadius='10'
									Padding='5'>
						<DockPanel LastChildFill='True'
											 Background='Transparent'>
							<TextBox Name='TextBoxWithButtons'
											 DockPanel.Dock='Left'
											 Template='{StaticResource TextBoxBaseControlTemplate}' />
							<input:AutoCompleteBox x:Name="textBox_CommandLine"
																		 MinimumPrefixLength='0'
																		 Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type TextBlock}, Mode=FindAncestor}}"
																		 PreviewKeyDown="textBox_CommandLine_PreviewKeyDown"
																		 TextChanged="textBox_CommandLine_TextChanged_1"
																		 IsTextCompletionEnabled='True'
																		 BorderBrush='Transparent' />
						</DockPanel>
					</Border>
				</ControlTemplate>
			</TextBox.Template>
		</TextBox>
		<!--<TextBox x:Name="textBox_CommandLine"
						 Grid.Row="1"
						 FontSize="24"
						 TextWrapping="Wrap"
						 HorizontalAlignment="Stretch"
						 Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type TextBlock}, Mode=FindAncestor}}"
						 PreviewKeyDown="textBox_CommandLine_PreviewKeyDown"
						 TextChanged="textBox_CommandLine_TextChanged"
						 Template="{StaticResource TextBoxBaseControlTemplate}" />-->
		<Grid Grid.Row="2"
					Margin="0,5">
			<Grid.ColumnDefinitions>
				<ColumnDefinition MinWidth="150"
													Width="150" />
				<ColumnDefinition />
				<!--<ColumnDefinition />-->
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition />
				<RowDefinition Height='Auto' />
				<RowDefinition Height='Auto' />
			</Grid.RowDefinitions>
			<TreeView x:Name="treeView_CommandList"
								Grid.RowSpan='2'
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								BorderBrush="Transparent"
								FontSize="20"
								Margin='0,0,5,0'
								SelectedItemChanged="treeView_CommandList_SelectedItemChanged"
								Focusable='False'
								AllowDrop='True'
								PreviewDragOver='treeView_CommandList_DragOver'
								PreviewDrop='treeView_CommandList_PreviewDrop'>
				<TreeView.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
													 Color="#E33232" />
					<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}"
													 Color="Transparent" />
					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
													 Color="#f9f9f9" />
					<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}"
													 Color="Black" />
					<!--<LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                                     EndPoint="0,1"
                                     StartPoint="0,0">
                    <GradientStop Color="#99DCEBFC"
                                  Offset="0" />
                    <GradientStop Color="#99C1DBFC"
                                  Offset="1" />
                </LinearGradientBrush>-->
					<!--<LinearGradientBrush x:Key="{x:Static SystemColors.ControlBrushKey}"
                                     EndPoint="0,1"
                                     StartPoint="0,0">
                    <GradientStop Color="#99F8F8F8"
                                  Offset="0" />
                    <GradientStop Color="#99E5E5E5"
                                  Offset="1" />
                </LinearGradientBrush>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
                                 Color="Black" />
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}"
                                 Color="Black" />-->
				</TreeView.Resources>
				<TreeView.Template>
					<StaticResource ResourceKey="TreeviewControlTemplate" />
				</TreeView.Template>
				<TreeView.ItemContainerStyle>
					<Style TargetType="{x:Type TreeViewItem}">
						<Style.Resources>
							<Style TargetType="{x:Type Border}">
								<Setter Property="CornerRadius"
												Value="2" />
							</Style>
						</Style.Resources>
						<!-- Style for the selected item -->
						<Setter Property="BorderThickness"
										Value="1" />
						<Setter Property="BorderBrush"
										Value="#eee" />
						<!--<Setter Property="Background"
                            Value="Green" />-->
						<Setter Property="Padding"
										Value="3" />
						<Style.Triggers>
							<!-- Selected and has focus -->
							<Trigger Property="IsSelected"
											 Value="True">
								<Setter Property="BorderBrush"
												Value="#d32222" />
								<!--<Setter Property="BorderBrush"
                                    Value="#7DA2CE" />-->
								<!--<Setter Property="Foreground"
                                    Value="#FF4242" />-->
							</Trigger>
							<!-- Selected but does not have the focus -->
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected"
														 Value="True" />
									<Condition Property="IsSelectionActive"
														 Value="False" />
								</MultiTrigger.Conditions>
								<Setter Property="BorderBrush"
												Value="#eee" />
								<Setter Property="Foreground"
												Value="#d32222" />
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected"
														 Value="False" />
									<Condition Property="IsMouseOver"
														 Value="True" />
								</MultiTrigger.Conditions>
								<!--<Setter Property="BorderBrush"
                                    Value="#997DA2CE" />-->
								<Setter Property="BorderBrush"
												Value="#55d32222" />
								<Setter Property="Background"
												Value="#33E33232">
									<!--<Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1"
                                                         StartPoint="0,0">
                                        <GradientStop Color="#55DCEBFC"
                                                      Offset="0" />
                                        <GradientStop Color="#55C1DBFC"
                                                      Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>-->
								</Setter>
							</MultiTrigger>
						</Style.Triggers>
					</Style>
				</TreeView.ItemContainerStyle>
				<TreeView.ItemsPanel>
					<ItemsPanelTemplate>
						<!--<UniformGrid Columns="3" />-->
						<!--<WrapPanel Orientation="Horizontal"
                               HorizontalAlignment="Stretch"
                               Width="auto"
                               ScrollViewer.HorizontalScrollBarVisibility="Disabled" />-->
						<!--<VirtualizingStackPanel Orientation="Horizontal"
                                            IsItemsHost="True"/>-->
						<StackPanel IsItemsHost="True"
												VirtualizingPanel.IsContainerVirtualizable="True"
												VirtualizingPanel.IsVirtualizing="True"
												VirtualizingPanel.VirtualizationMode="Recycling"
												Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}, Mode=FindAncestor}}" />
						<!--<WrapPanel IsItemsHost="True"
                                       VirtualizingPanel.IsContainerVirtualizable="True"
                                       VirtualizingPanel.IsVirtualizing="True"
                                       VirtualizingPanel.VirtualizationMode="Recycling"
                                       Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollContentPresenter}}}" />-->
					</ItemsPanelTemplate>
				</TreeView.ItemsPanel>
			</TreeView>
			<!--</Expander>-->
			<GridSplitter Width="5"
										BorderThickness="1"
										BorderBrush="#e0e0e0"
										Focusable='False' />
			<RichTextBox Grid.Column="1"
									 Grid.RowSpan='1'
									 x:Name="textBox_Messages"
									 HorizontalAlignment="Stretch"
									 Margin="0,0,5,0"
									 MinWidth="50"
									 PreviewMouseLeftButtonDown='textBox_Messages_PreviewMouseLeftButtonDown'
									 ScrollViewer.HorizontalScrollBarVisibility='Auto'
									 ScrollViewer.VerticalScrollBarVisibility='Auto'
									 Foreground="Green"
									 Padding='10,0'
									 IsReadOnly='True'>
				<FlowDocument>
					<FlowDocument.Resources>
						<!-- This style is used to set the margins for all paragraphs in the FlowDocument to 0. -->
						<Style TargetType="{x:Type Paragraph}">
							<Setter Property="Margin"
											Value="0" />
						</Style>
					</FlowDocument.Resources>
				</FlowDocument>
			</RichTextBox>
			<ProgressBar x:Name='progressBar1'
									 Grid.Row='1'
									 Grid.Column='1'
									 Height='5' />
			<ListBox Grid.Row='2'
							 Grid.ColumnSpan='2'
							 Name='listBoxUnsetProperties'
							 ItemsSource='{x:Static propertyinterceptor:StaticPropertyInterceptor.UnsetProperties}'
							 SelectionChanged='listBoxUnsetProperties_SelectionChanged'
							 SelectionMode='Single'
							 Visibility="{Binding ElementName=listBoxUnsetProperties, Path=Items.Count, Converter={StaticResource hideListBox}}">
				<ListBox.ItemsPanel>
					<ItemsPanelTemplate>
						<WrapPanel Orientation='Horizontal'
											 IsItemsHost="True" />
					</ItemsPanelTemplate>
				</ListBox.ItemsPanel>
				<ListBox.ItemTemplate>
					<DataTemplate>
						<Border Padding='3,0'
										BorderBrush='#999'
										BorderThickness='1'
										CornerRadius='5'
										ToolTip='{Binding UserPrompt}'>
							<StackPanel Orientation='Horizontal'>
								<TextBlock Text='{Binding DeclaringClassName}'
													 FontSize='12'
													 Margin='0'
													 Padding='0'
													 VerticalAlignment='Center'
													 Foreground='#678' />
								<TextBlock Text='{Binding PropertyName}'
													 FontSize='16'
													 Padding='0'
													 VerticalAlignment='Center'
													 Margin='4,0,0,0'
													 Foreground='Red' />
							</StackPanel>
						</Border>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Grid>
	</Grid>
	<!--</Border>-->
</UserControl>
